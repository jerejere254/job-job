"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _Portal = _interopRequireDefault(require("../src/Portal"));

describe('Portal', function () {
  it('should append container to document body', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement("div", null, "children"));
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Portal["default"], null, "children"));

    var elements = _react2.screen.getAllByText('children');

    expect(elements[1]).toHaveAttribute('evergreen-portal-container');
  });
  it('should render children', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Portal["default"], null, /*#__PURE__*/_react["default"].createElement("span", {
      "data-testid": "children"
    }, "Hello world")));

    var children = _react2.screen.getByTestId('children');

    expect(children).toHaveTextContent('Hello world');
    expect(children.parentNode).toHaveAttribute('evergreen-portal-container');
  });
  it('should remove DOM element when unmounted', function () {
    var _render = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Portal["default"], null, "children")),
        unmount = _render.unmount;

    unmount();
    expect(_react2.screen.queryByText('children')).toBeNull();
    expect(document.querySelector('[evergreen-portal-container]')).toBeNull();
  });
});